import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { fetchUserLogin } from "./login-api";

export interface LoginState {
  loading: boolean;
  error: string | boolean;
  token: string | undefined;
  username: string | undefined;
}

const initialState: LoginState = {
  loading: false,
  error: false,
  token: "",
  username: ""
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchUserLoginAsync = createAsyncThunk(
  "login/fetchUserLogin",
  async (loginCreds: { username: string; password: string }) => {
    const token = await fetchUserLogin(
      loginCreds.username,
      loginCreds.password,
    );
    // The value we return becomes the `fulfilled` action payload
    return token;
  },
);

export const loginSlice = createSlice({
  name: "login",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    updateUserName: (state, action: PayloadAction<string>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.username = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(fetchUserLoginAsync.pending, state => {
        state.loading = true;
        state.error = false;
        state.token = "";
      })
      .addCase(fetchUserLoginAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.token = action.payload;
        state.error = false;
      })
      .addCase(fetchUserLoginAsync.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message as string | boolean;
        state.token = "";
      });
  },
});

// actions generated without payload
export const { updateUserName } = loginSlice.actions;


export default loginSlice.reducer;
