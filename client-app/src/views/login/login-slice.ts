import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { fetchUserLogin } from "./login-api";

export interface LoginState {
  loading: boolean;
  error: string | boolean;
  token: string | undefined;
  username: string | undefined;
}

const initialState: LoginState = {
  loading: false,
  error: false,
  token: "",
  username: "",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// return an action creator to generate promise lifecircle actions: pending, fullfilled and rejected
export const fetchUserLoginAsync = createAsyncThunk(
  //1. action lifecircle prefix
  "login/fetchUserLogin",
  //2. payload creator
  async (loginCreds: { username: string; password: string }) => {
    const response = await fetchUserLogin(
      loginCreds.username,
      loginCreds.password,
    );
    // The value we return becomes the action payload
    return response;
  },
  // 3. options [optional] e.g. request cancelling or retry and etc
);

export const loginSlice = createSlice({
  name: "login",
  initialState,
  reducers: {
    updateUserName: (state, action: PayloadAction<string>) => {
      state.username = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    // Add reducers for additional action types here, and handle loading state as needed
    builder
      .addCase(fetchUserLoginAsync.pending, state => {
        // will dispatch action: login/fetchUserLogin/pending
        state.loading = true;
        state.error = false;
        state.token = "";
      })
      .addCase(fetchUserLoginAsync.fulfilled, (state, action) => {
        // will dispatch action: login/fetchUserLogin/fulfilled
        state.loading = false;
        state.token = action.payload;
        state.error = false;
      })
      .addCase(fetchUserLoginAsync.rejected, (state, action) => {
        // will dispatch action: login/fetchUserLogin/rejected
        state.loading = false;
        state.error = action.error.message as string | boolean;
        state.token = "";
      });
  },
});

export const { updateUserName } = loginSlice.actions;

export default loginSlice.reducer;
